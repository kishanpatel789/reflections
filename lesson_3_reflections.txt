When would you want to use a remote repository rather than keeping all your work local?

A remote directory would be useful when working on a project with a team of other develoeprs.
Each developer could access the past commits and work independently; later the commits can be merged.
As a cloud service, working with a remote repository allows one to work on the same project from multiple computers.


Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

You may want two separate versions of the project. The local version could serve as a
backup for the remote repository. Also, if the remote repository automatically
pulled into the local branch, a bug could be introduced.


Describe the differences between forks, clones, and branches.
When would you use one instead of another?

A fork is a copy of a Github repository that stores the new repository in your
Github account. A clone is a copy of a Github or local repository that is stored
on the local machine. Branches are a new line of commits that are used when testing
new features. Branches can be merged back into the master.


What is the benefit of having a copy of the last known state of the remote
stored locally?

Having a local copy of the last known remote state allows you to see how your local
master branch has changed from the remote branch.
Also, if a collaborator makes changes to the local branch, you can examine the
difference between the modified remote branch and your master branch before
merging the two states.


How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

I suppose collaboration could be done via email or a cloud service like Dropbox.
It would not be as efficient to communicate changes with other collaborators. It
would also take a bit longer to merge changes since you wouldn't have access to
Github's pull requests.
If you work with someone in the same room, it may be easier to discuss changes as
you are coding.


When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

Making changes in a separate branch is useful when you want to build a new feature
that could potentially introduce error into your working master branch. However,
when many branches are formed (both by you and collaborators), merging branches
locally and on GitHub can become a bit cumbersome. Making changes exclusively on
the master branch eliminates some of this struggle.
